From 009a806143f83ff2bdd194ebb414d3da97d0ba38 Mon Sep 17 00:00:00 2001
From: Michael Allwright <allsey87@gmail.com>
Date: Fri, 4 Sep 2020 16:07:00 +0200
Subject: [PATCH] vl53l0x: Add IIO trigger functionality

---
 drivers/iio/proximity/vl53l0x-i2c.c | 166 +++++++++++++++++++++++++---
 1 file changed, 150 insertions(+), 16 deletions(-)

diff --git a/drivers/iio/proximity/vl53l0x-i2c.c b/drivers/iio/proximity/vl53l0x-i2c.c
index b48216cc1858..77b8f7093239 100644
--- a/drivers/iio/proximity/vl53l0x-i2c.c
+++ b/drivers/iio/proximity/vl53l0x-i2c.c
@@ -18,7 +18,11 @@
 #include <linux/i2c.h>
 #include <linux/module.h>
 
+#include <linux/iio/buffer.h>
 #include <linux/iio/iio.h>
+#include <linux/iio/sysfs.h>
+#include <linux/iio/trigger_consumer.h>
+#include <linux/iio/triggered_buffer.h>
 
 #define VL_REG_SYSRANGE_START				0x00
 
@@ -35,54 +39,148 @@
 
 struct vl53l0x_data {
 	struct i2c_client *client;
+	struct mutex lock;
+	const char *label;
 };
 
+static irqreturn_t vl53l0x_trigger_handler(int irq, void *p)
+{
+	struct iio_poll_func *pf = p;
+	struct iio_dev *indio_dev = pf->indio_dev;
+	struct vl53l0x_data* data = iio_priv(indio_dev);
+
+	int ret;
+	irqreturn_t irq_ret = IRQ_HANDLED;
+	int tries = 20;
+	__be16 buffer[2];
+
+	mutex_lock(&data->lock);
+
+	ret = i2c_smbus_write_byte_data(data->client, VL_REG_SYSRANGE_START, 1);
+	if (ret < 0) {
+		dev_err(&data->client->dev, "Could not start measurement");
+		irq_ret = IRQ_NONE;
+		goto out;
+	}
+	do {
+		usleep_range(1000, 5000);
+		ret = i2c_smbus_read_byte_data(data->client,
+					       VL_REG_RESULT_RANGE_STATUS);
+		if (ret < 0) {
+			dev_err(&data->client->dev, "Could not read measurement status");
+			irq_ret = IRQ_NONE;
+			goto out;
+		}
+
+		if (ret & VL_REG_RESULT_RANGE_STATUS_COMPLETE)
+			break;
+
+	} while (--tries);
+	if (!tries) {
+		dev_err(&data->client->dev, "Time-out while waiting for measurement");
+		irq_ret = IRQ_NONE;
+		goto out;
+	}
+
+	ret = i2c_smbus_read_i2c_block_data(data->client, VL_REG_RESULT_RANGE_STATUS + 10,
+					    2, (u8 *) buffer);
+	if (ret < 0 || ret != 2) {
+		dev_err(&data->client->dev, "Could not read measurement");
+		irq_ret = IRQ_NONE;
+		goto out;
+	}
+
+	iio_push_to_buffers_with_timestamp(indio_dev, buffer,
+					   iio_get_time_ns(indio_dev));
+out:
+	mutex_unlock(&data->lock);
+	iio_trigger_notify_done(indio_dev->trig);
+	return irq_ret;
+}
+
 static int vl53l0x_read_proximity(struct vl53l0x_data *data,
 				  const struct iio_chan_spec *chan,
 				  int *val)
 {
 	struct i2c_client *client = data->client;
-	u16 tries = 20;
-	u8 buffer[12];
+	int tries = 20;
+	__be16 buffer[2];
 	int ret;
 
+	mutex_lock(&data->lock);
+
 	ret = i2c_smbus_write_byte_data(client, VL_REG_SYSRANGE_START, 1);
 	if (ret < 0)
-		return ret;
+		goto out;
 
 	do {
+		usleep_range(1000, 5000);
 		ret = i2c_smbus_read_byte_data(client,
 					       VL_REG_RESULT_RANGE_STATUS);
 		if (ret < 0)
-			return ret;
+			goto out;
 
 		if (ret & VL_REG_RESULT_RANGE_STATUS_COMPLETE)
 			break;
 
-		usleep_range(1000, 5000);
 	} while (--tries);
-	if (!tries)
-		return -ETIMEDOUT;
+	if (!tries) {
+		ret = -ETIMEDOUT;
+		goto out;
+	}
 
-	ret = i2c_smbus_read_i2c_block_data(client, VL_REG_RESULT_RANGE_STATUS,
-					    12, buffer);
+	ret = i2c_smbus_read_i2c_block_data(client, VL_REG_RESULT_RANGE_STATUS + 10,
+					    2, (u8 *) buffer);
 	if (ret < 0)
-		return ret;
-	else if (ret != 12)
-		return -EREMOTEIO;
+		goto out;
+	else if (ret != 2) {
+		ret = -EREMOTEIO;
+		goto out;
+	}
+
 
 	/* Values should be between 30~1200 in millimeters. */
-	*val = (buffer[10] << 8) + buffer[11];
+	*val = be16_to_cpu(buffer);
 
-	return 0;
+out:
+	mutex_unlock(&data->lock);
+	return ret;
+}
+
+static ssize_t vl53l0x_read_label(struct iio_dev *indio_dev,
+				  uintptr_t private,
+				  const struct iio_chan_spec *chan,
+				  char *buf)
+{
+	struct vl53l0x_data *data = iio_priv(indio_dev);
+
+	return sprintf(buf, "%s\n", data->label);
 }
 
+
+static const struct iio_chan_spec_ext_info vl53l0x_ext_info[] = {
+	{ .name = "label",
+	  .read = vl53l0x_read_label,
+	  .shared = IIO_SHARED_BY_ALL,
+	}, { /* sentinel */ },
+};
+
 static const struct iio_chan_spec vl53l0x_channels[] = {
 	{
 		.type = IIO_DISTANCE,
 		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |
 				      BIT(IIO_CHAN_INFO_SCALE),
+		.ext_info = vl53l0x_ext_info,
+		.scan_index = 0,
+		.scan_type = {
+			.sign = 'u',
+			.realbits = 16,
+			.storagebits = 16,
+			.endianness = IIO_BE,
+		},
+
 	},
+	IIO_CHAN_SOFT_TIMESTAMP(1),
 };
 
 static int vl53l0x_read_raw(struct iio_dev *indio_dev,
@@ -112,6 +210,8 @@ static int vl53l0x_read_raw(struct iio_dev *indio_dev,
 	}
 }
 
+static const unsigned long vl53l0x_scan_masks[] = {1, 0};
+
 static const struct iio_info vl53l0x_info = {
 	.read_raw = vl53l0x_read_raw,
 };
@@ -120,6 +220,7 @@ static int vl53l0x_probe(struct i2c_client *client)
 {
 	struct vl53l0x_data *data;
 	struct iio_dev *indio_dev;
+	int ret = 0;
 
 	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*data));
 	if (!indio_dev)
@@ -134,14 +235,46 @@ static int vl53l0x_probe(struct i2c_client *client)
 				     I2C_FUNC_SMBUS_BYTE_DATA))
 		return -EOPNOTSUPP;
 
+	ret = device_property_read_string(&client->dev, "label", &data->label);
+
+	if (ret < 0) {
+		dev_err(&client->dev, "Failed to read label property: %d\n", ret);
+		return ret;
+	}
+
 	indio_dev->dev.parent = &client->dev;
 	indio_dev->name = "vl53l0x";
 	indio_dev->info = &vl53l0x_info;
 	indio_dev->channels = vl53l0x_channels;
 	indio_dev->num_channels = ARRAY_SIZE(vl53l0x_channels);
-	indio_dev->modes = INDIO_DIRECT_MODE;
+	indio_dev->modes = INDIO_DIRECT_MODE | INDIO_BUFFER_SOFTWARE;
+
+	ret = iio_triggered_buffer_setup(indio_dev, iio_pollfunc_store_time,
+					 vl53l0x_trigger_handler, NULL);
+	if(ret) {
+		dev_err(&client->dev, "could not setup buffer\n");
+		return ret;
+	}
+
+	ret = iio_device_register(indio_dev);
+
+	if (ret) {
+		dev_err(&client->dev, "could not register device\n");
+		iio_triggered_buffer_cleanup(indio_dev);
+	}
+	
+	return ret;
+}
 
-	return devm_iio_device_register(&client->dev, indio_dev);
+static int vl53l0x_remove(struct i2c_client *client)
+{
+	struct iio_dev *indio_dev = i2c_get_clientdata(client);
+	struct vl53l0x_data *data = iio_priv(indio_dev);
+
+	iio_triggered_buffer_cleanup(indio_dev);
+	iio_device_unregister(indio_dev);
+
+	return 0;
 }
 
 static const struct of_device_id st_vl53l0x_dt_match[] = {
@@ -156,6 +289,7 @@ static struct i2c_driver vl53l0x_driver = {
 		.of_match_table = st_vl53l0x_dt_match,
 	},
 	.probe_new = vl53l0x_probe,
+	.remove  = vl53l0x_remove,
 };
 module_i2c_driver(vl53l0x_driver);
 
-- 
2.25.1

